import sys
import random
from datetime import datetime
from PyQt6.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout,
    QGridLayout, QGroupBox
)
from PyQt6.QtCore import QTimer
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

class GroundStation(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("COB-SAT Ground Station")
        self.resize(1200, 800)

        main_layout = QHBoxLayout()
        left_layout = QVBoxLayout()
        graph_grid = QGridLayout()

        self.summary = QGroupBox("Mission Summary")
        summary_layout = QVBoxLayout()
        self.labels = {}
        fields = [
            "Mission Time", "Packet Count", "Flight State", "Flight Time", "Altitude",
            "Temperature", "Pressure", "Voltage", "GPS Time", "GPS Date",
            "GPS Latitude", "GPS Longitude"
        ]
        for field in fields:
            label = QLabel(f"{field}: ---")
            self.labels[field] = label
            summary_layout.addWidget(label)
        self.summary.setLayout(summary_layout)
        left_layout.addWidget(self.summary)

        for text in ["Release", "Retrieve Save Data", "Activate LED & Buzzer"]:
            btn = QPushButton(text)
            left_layout.addWidget(btn)

        self.graphs = {}
        graph_titles = [
            "Altitude vs Time", "Temperature vs Time", "Pressure vs Time",
            "Velocity vs Time", "Displacement vs Time", "Tilt vs Time"
        ]
        for i, title in enumerate(graph_titles):
            fig = Figure(figsize=(4, 3))
            canvas = FigureCanvas(fig)
            ax = fig.add_subplot(111)
            ax.set_title(title)
            ax.set_xlabel("Time (s)")
            ax.set_ylabel(title.split(" vs ")[0])
            self.graphs[title] = (ax, [], [], canvas)
            row, col = divmod(i, 2)
            graph_grid.addWidget(canvas, row, col)

        main_layout.addLayout(left_layout, 1)
        main_layout.addLayout(graph_grid, 2)
        self.setLayout(main_layout)

        self.timer = QTimer()
        self.timer.timeout.connect(self.receive_packet)
        self.timer.start(1000)
        self.time_counter = 0

    def receive_packet(self):
        packet = self.generate_simulated_packet()
        self.parse_packet(packet)

    def generate_simulated_packet(self):
        team_id = "UAH01"
        mission_time = datetime.now().strftime("%H:%M:%S")
        packet_count = str(self.time_counter)
        sw_state = random.choice(["DEPLOYED", "STANDBY"])
        pl_state = random.choice(["ACTIVE", "IDLE"])
        altitude = str(round(random.uniform(1000, 3000), 2))
        temp = str(round(random.uniform(15.0, 30.0), 2))
        pressure = str(round(random.uniform(980, 1020), 2))
        voltage = str(round(random.uniform(6.5, 8.4), 2))
        gps_time = datetime.now().strftime("%H:%M:%S")
        gps_date = datetime.now().strftime("%Y-%m-%d")
        gps_lat = str(round(random.uniform(34.72, 34.74), 6))
        gps_lon = str(round(random.uniform(-86.59, -86.58), 6))

        packet = ",".join([
            team_id, mission_time, packet_count, sw_state, pl_state, altitude,
            temp, pressure, voltage, gps_time, gps_date, gps_lat, gps_lon
        ])
        return packet

    def parse_packet(self, packet):
        fields = packet.strip().split(',')
        keys = list(self.labels.keys())
        for i in range(len(keys)):
            self.labels[keys[i]].setText(f"{keys[i]}: {fields[i]}")

        self.time_counter += 1
        updates = {
            "Altitude vs Time": float(fields[5]),
            "Temperature vs Time": float(fields[6]),
            "Pressure vs Time": float(fields[7]),
            "Velocity vs Time": float(fields[5]) / 10,
            "Displacement vs Time": float(fields[5]) / 2,
            "Tilt vs Time": float(fields[5]) % 45
        }
        for title, value in updates.items():
            ax, x_data, y_data, canvas = self.graphs[title]
            x_data.append(self.time_counter)
            y_data.append(value)
            ax.clear()
            ax.plot(x_data, y_data, color='blue')
            ax.set_title(title)
            ax.set_xlabel("Time (s)")
            ax.set_ylabel(title.split(" vs ")[0])
            canvas.draw()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = GroundStation()
    window.show()
    sys.exit(app.exec())
