import sys
from datetime import datetime
from PyQt6.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout,
    QGridLayout, QGroupBox, QSpacerItem, QSizePolicy
)
from PyQt6.QtGui import QPixmap
from PyQt6.QtCore import QTimer
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

class GroundStation(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("COB-SAT Ground Station")
        self.resize(1200, 800)

        main_layout = QHBoxLayout()
        left_layout = QVBoxLayout()
        graph_grid = QGridLayout()

        logo_layout = QHBoxLayout()

        logo1 = QLabel()
        pixmap1 = QPixmap("team_logo1.png")
        if not pixmap1.isNull():
            logo1.setPixmap(pixmap1.scaledToWidth(100))
        else:
            logo1.setText("agh")

        logo2 = QLabel()
        pixmap2 = QPixmap("team_logo2.png")
        if not pixmap2.isNull():
            logo2.setPixmap(pixmap2.scaledToWidth(100))
        else:
            logo2.setText("dust")

        logo_layout.addWidget(logo1)
        logo_layout.addWidget(logo2)

        left_layout.addLayout(logo_layout)
        team_label = QLabel("<b>Team: COB-SAT</b>")
        left_layout.addWidget(team_label)

        self.summary = QGroupBox("Mission Summary")
        summary_layout = QVBoxLayout()
        self.labels = {}
        fields = [
            "Packet Count", "GPS Latitude", "GPS Longitude", "GPS Time",
            "GPS Date", "Current State", "Ground Altitude"
        ]
        for field in fields:
            label = QLabel(f"{field}: ---")
            self.labels[field] = label
            summary_layout.addWidget(label)
        self.summary.setLayout(summary_layout)
        left_layout.addWidget(self.summary)

        for text in ["Release", "Retrieve Save Data", "Activate LED & Buzzer"]:
            btn = QPushButton(text)
            left_layout.addWidget(btn)

        self.ground_altitude = None
        self.payload_released = False
        init_btn = QPushButton("Initialize Sensors")
        init_btn.clicked.connect(self.initialize_sensors)
        left_layout.addWidget(init_btn)

        left_layout.addSpacerItem(QSpacerItem(20, 40, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))

        self.graphs = {}
        graph_titles = [
            "Altitude", "Temperature", "Pressure",
            "Velocity", "Displacement", "Tilt"
        ]
        for i, title in enumerate(graph_titles):
            fig = Figure(figsize=(4, 3))
            canvas = FigureCanvas(fig)
            ax = fig.add_subplot(111)
            ax.set_xlabel("Time (s)")
            ax.set_ylabel(title)
            value_label = QLabel(f"{title}: ---")
            self.graphs[title] = {
                "ax": ax,
                "x": [],
                "y": [],
                "canvas": canvas,
                "label": value_label
            }
            row, col = divmod(i, 2)
            graph_grid.addWidget(value_label, row * 2, col)
            graph_grid.addWidget(canvas, row * 2 + 1, col)

        main_layout.addLayout(left_layout, 1)
        main_layout.addLayout(graph_grid, 2)
        self.setLayout(main_layout)

        self.timer = QTimer()
        self.timer.timeout.connect(self.receive_packet)
        self.timer.start(1000)
        self.time_counter = 0

    def initialize_sensors(self):
        if hasattr(self, "last_altitude"):
            self.ground_altitude = self.last_altitude
            self.labels["Ground Altitude"].setText(f"Ground Altitude: {self.ground_altitude}")
        else:
            self.labels["Ground Altitude"].setText("Ground Altitude: ---")

    def activate_servo(self):
        pass
        # ADD SERVO CODE

    def receive_packet(self):
        packet = None  # Inject real packet
        if packet:
            self.parse_packet(packet)

    def parse_packet(self, packet):
        fields = packet.strip().split(',')
        if len(fields) != 13:
            return

        self.time_counter += 1

        self.labels["Packet Count"].setText(f"Packet Count: {fields[2]}")
        self.labels["GPS Latitude"].setText(f"GPS Latitude: {fields[11]}")
        self.labels["GPS Longitude"].setText(f"GPS Longitude: {fields[12]}")
        self.labels["GPS Time"].setText(f"GPS Time: {fields[9]}")
        self.labels["GPS Date"].setText(f"GPS Date: {fields[10]}")
        self.labels["Current State"].setText(f"Current State: {fields[3]}, {fields[4]}")

        self.last_altitude = float(fields[5])
        relative_altitude = (
            self.last_altitude - self.ground_altitude
            if self.ground_altitude is not None else self.last_altitude
        )

        # servo
        if not self.payload_released and relative_altitude <= 530:
            self.activate_servo()
            self.payload_released = True

        updates = {
            "Altitude": relative_altitude,
            "Temperature": float(fields[6]),
            "Pressure": float(fields[7]),
            "Velocity": relative_altitude / 10,
            "Displacement": relative_altitude / 2,
            "Tilt": relative_altitude % 45
        }

        for title, value in updates.items():
            graph = self.graphs[title]
            graph["x"].append(self.time_counter)
            graph["y"].append(value)
            graph["label"].setText(f"{title}: {value}")
            ax = graph["ax"]
            ax.clear()
            ax.plot(graph["x"], graph["y"], color='blue')
            ax.set_xlabel("Time (s)")
            ax.set_ylabel(title)
            graph["canvas"].draw()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = GroundStation()
    window.show()
    sys.exit(app.exec())
